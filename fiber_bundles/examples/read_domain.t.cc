// $RCSfile: read_domain.t.cc,v $ $Revision: 1.13 $ $Date: 2012/03/01 00:40:40 $

//
// Copyright (c) 2012 Limit Point Systems, Inc.
//

/// @example examples/read_domain.t.cc

#include "std_iostream.h"
#include "namespace_poset.h"
#include "poset_bounds_descriptor.h"
#include "sec_rep_space.h"
#include "storage_agent.h"

using namespace fiber_bundle;

string filename;

int
main(int argc, char** argv)
{

  if (argc > 1)
  {
    filename = argv[1];
  }
  else
  {
    cerr << "usage: read_domain.t sheaf_file domain_id\n";
    exit(0);
  }

  int domain_id;

  if (argc > 2)
  {
    domain_id = atoi(argv[2]);
  }
  else
  {
    cerr << "usage: read_domain.t sheaf_file domain_id\n";
    exit(0);
  }

  cout << "@error" << endl
  << "This program is intended to read a single domain " << endl
  << "from a polyline mesh generated by polyline.t.cc" << endl
  << "However, polyline.t.cc is not up to date and doesn't " << endl
  << "currently generate a valid domain decomposed output file." << endl
  << "This program executes, but does not properly read a single domain."
  << endl;



  // Make the default namespace

  namespace_poset ns("test");

  // Read the namespace from the file;
  // need write access in order to read it.

  ns.get_read_write_access();
  storage_agent sa(filename, sheaf_file::READ_ONLY, false);
  sa.put_member_record_buffer_ub(15);
  sa.put_dof_tuple_record_buffer_ub(15);

  // Read the namespace poset

  sa.read(ns);

  // Attach a poset handle to the mesh poset

  poset* p = ns.member_poset<poset>(string("polyline"), false);

  // Read the table of contents of the poset.

  //   sa.read_toc(p);

  // Read domain_0.

  p->get_read_write_access();

  cout << *p << endl;


  poset_member domain(p, "domain_0");

  poset_bounds_descriptor domain_bounds(poset_bounds_descriptor::MEMBER_MEMBER,
                                        BOTTOM_INDEX,
                                        domain.index());

  //   sa.read(p, domain_bounds);

  // Output a text version to stdout

  cout << *p << endl;

  p->release_access();

  // Detach the handles before
  // their destructors get called to avoid
  // them complaining about needing access.

  domain.detach_from_state();


  return 0;
}
