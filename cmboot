#!/bin/bash

#
# Copyright (c) 2012 Limit Point Systems, Inc. 
#

# NOTE: The assumption is that this script is executed from the top of the SheafSystemTest source tree.

# User can provide command line args to cmake
user_args=$@

# Set preferred build directory.
# You may change this to any location that suits.
builddir=build

# The directory cmboot is run from; ostensibly the top of the source tree.
sourcedir=$PWD

# Create the build directory
if ! test -d $builddir; then
   mkdir $builddir
fi

# If CXX is set, then (in rudimentary fashion) set corresponding CC
if [ $CXX ]; then
	
	compiler=$(basename "$CXX")
	
	# if the tail end is icpc, it's intel, otherwise g++
	if [ $compiler = "icpc" ]; then
		c_name=$(dirname "$CXX")/icc
 	else
 		c_name=$(dirname "$CXX")/gcc
	fi
else
	echo "CXX is not set in your environment. Set it, and then rerun $0"
	exit
fi

if [ -n $CC ]; then
    echo  "   "
    echo  "   It would appear that CC is not set in this terminal.                                 "                                                             
    echo  "   "
    echo  "   Unless you have the environment variable "CC" set to some desired value, Cmake       "
    echo  "   will detect and use your system's default C compiler. Use of the C compiler          "
    echo  "   is very minimal in LPS software, but there is potential for error here if the        " 
    echo  "   detected C compiler doesn't jibe with your CXX setting.                              "
    echo  "   "
    echo  "   Since the CXX variable in your environment has the following value:                                "
    echo  "      "$CXX"                                                                            " 
    echo  "   CC should probably be set to: "
    echo  "      "$c_name"   "
    echo  "   "
    echo  "   Alternatively, you may specify CC on this script's command line:                     "                                       
    echo  "   "
    echo  "      Example   <GNU>: $0 -DCMAKE_C_COMPILER=<CXX bin path>/gcc   "
    echo  "      Example <Intel>: $0 -DCMAKE_C_COMPILER=<CXX bin path>/icc   "
    echo  "   " 
    echo  "   NOTE: CMAKE_C_COMPILER may only be effectively set on an initial cmake run; any subsequent "
    echo  "   runs will ignore any such directive. If you wish to change the value of CC after the "
    echo  "   initial run, then you must throw away $builddir/CMakeCache.txt and rerun cmake.      " 
    echo  "   "
    echo  "   Hit enter to continue, any other key to abort.                                       "
    echo  "   "
    
	read -s -n 1 response
	case "$response" in
		"")
			;;
		*)
			kill 0
	esac
fi

while [ ! -z "$1" ]
do
  case "$1" in
    --help)
		echo  "   "
    	echo  "Usage: $0 -D<cmake variable=value>                                                                                     "
    	echo  "   "
    	echo  "   Automates configure phase of cmake run. Arg(s) can be any legitimate                                                "
    	echo  "   CMake variable/value pair. See $builddir/CMakeCache.txt (after run) for a complete list of                          "
    	echo  "   variables that this build system understands.                                                                       "
    	echo  "   "
        echo  "      Example: $0                                                                                                      "
    	echo  "   "
        echo  "      Example: $0 -DLPS_DOC_STATE=User                                                                                 "
    	echo  "   "
        echo  "      Example: $0 -DLPS_DOC_STATE=User -DCMAKE_INSTALL_PREFIX=/tmp/test                                                "
        echo  "   "

        echo  "   " 
    	echo  "";;
     *) break;;
  esac
  exit 0
done

cd $builddir;

# give a little space
echo ""

# Get the SheafSystem home dir from the user.
echo "Enter fully qualified path to top level of SheafSystem source tree: "
echo "   Example: /home/user/projects/SheafSystem-my-branch: "
echo ""
echo -n "SheafSystem path: "
read response
if [ ! -z $response ]; then
	echo ""
	echo "Roger that, configuring ..."
	echo ""	
	# Redirect cmake errors to file
	if cmake $user_args -DSHEAFSYSTEM_HOME=$response $sourcedir 2> cmake.error; then
		echo ""
		echo "CMake configure complete. Now cd to $builddir and source the set_env_vars script"
		echo "appropriate for your your shell before executing make."
		echo""
		echo "Example:"
		echo""
		echo "	cd $builddir"
		echo "	source set_env_vars.csh"
		echo "	make -j6 lib"
		echo""
	# Cat the file to stdout. This really cleans up the cmake error trace.	
	else
		echo ""
		echo ""
		cat cmake.error
		echo ""
		echo ""
	fi
else
	echo "An empty path won't work. Try again."
fi
	
